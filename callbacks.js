// Exatamente! O callback serve para esperar ou executar algo depois que uma a√ß√£o acontece.

// Ele √© muito √∫til quando trabalhamos com c√≥digo que n√£o roda imediatamente, como:
// ‚úÖ Esperar um tempo (exemplo: setTimeout()).
// ‚úÖ Esperar uma resposta do servidor (exemplo: buscar dados de uma API).
// ‚úÖ Esperar um usu√°rio clicar num bot√£o (eventos).

// Resumindo: o callback ajuda a controlar o que acontece depois de outra a√ß√£o terminar.

// Se quiser testar na pr√°tica, posso te passar alguns desafios! üöÄ


function rand(min = 1000, max = 3000) {
  const num = Math.random() * (max - min) +
    min;
  return Math.floor(num);
}

function f1(callback) {
  setTimeout(function() {
    console.log('f1');
    if (callback) callback();
  }, rand());
}

function f2(callback) {
  setTimeout(function() {
    console.log('f2');
    if (callback) callback();
  }, rand());
}

function f3(callback) {
  setTimeout(function() {
    console.log('f3');
    if (callback) callback();
  }, rand());
}

f1(f1Callback);

function f1Callback() {
  f2(f2Callback);
}

function f2Callback() {
  f3(f3Callback);
}

function f3Callback() {
  console.log('Ol√° mundo!');
}
